// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`updateState > when authorized > should fail when trying to update last finalized slot to an invalid slot 1`] = `
"[
  {
    \\"code\\": \\"too_small\\",
    \\"minimum\\": 0,
    \\"type\\": \\"number\\",
    \\"inclusive\\": true,
    \\"exact\\": false,
    \\"message\\": \\"Number must be greater than or equal to 0\\",
    \\"path\\": [
      \\"lastFinalizedBlock\\"
    ]
  }
]"
`;

exports[`updateState > when authorized > should fail when trying to update last finalized slot to an invalid slot 2`] = `
[ZodError: [
  {
    "code": "too_small",
    "minimum": 0,
    "type": "number",
    "inclusive": true,
    "exact": false,
    "message": "Number must be greater than or equal to 0",
    "path": [
      "lastFinalizedBlock"
    ]
  }
]]
`;

exports[`updateState > when authorized > should fail when trying to update last lower synced slot to an invalid slot 1`] = `
"[
  {
    \\"code\\": \\"too_small\\",
    \\"minimum\\": 0,
    \\"type\\": \\"number\\",
    \\"inclusive\\": true,
    \\"exact\\": false,
    \\"message\\": \\"Number must be greater than or equal to 0\\",
    \\"path\\": [
      \\"lastLowerSyncedSlot\\"
    ]
  }
]"
`;

exports[`updateState > when authorized > should fail when trying to update last lower synced slot to an invalid slot 2`] = `
[ZodError: [
  {
    "code": "too_small",
    "minimum": 0,
    "type": "number",
    "inclusive": true,
    "exact": false,
    "message": "Number must be greater than or equal to 0",
    "path": [
      "lastLowerSyncedSlot"
    ]
  }
]]
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced block root to an invalid hash 1`] = `
"[
  {
    \\"validation\\": \\"regex\\",
    \\"code\\": \\"invalid_string\\",
    \\"message\\": \\"Invalid hexadecimal string\\",
    \\"path\\": [
      \\"lastUpperSyncedBlockRoot\\"
    ]
  },
  {
    \\"code\\": \\"too_small\\",
    \\"minimum\\": 66,
    \\"type\\": \\"string\\",
    \\"inclusive\\": true,
    \\"exact\\": true,
    \\"message\\": \\"Invalid block hash length\\",
    \\"path\\": [
      \\"lastUpperSyncedBlockRoot\\"
    ]
  }
]"
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced block root to an invalid hash 2`] = `
[ZodError: [
  {
    "validation": "regex",
    "code": "invalid_string",
    "message": "Invalid hexadecimal string",
    "path": [
      "lastUpperSyncedBlockRoot"
    ]
  },
  {
    "code": "too_small",
    "minimum": 66,
    "type": "string",
    "inclusive": true,
    "exact": true,
    "message": "Invalid block hash length",
    "path": [
      "lastUpperSyncedBlockRoot"
    ]
  }
]]
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced block slot to an invalid slot 1`] = `
"[
  {
    \\"code\\": \\"too_small\\",
    \\"minimum\\": 0,
    \\"type\\": \\"number\\",
    \\"inclusive\\": true,
    \\"exact\\": false,
    \\"message\\": \\"Number must be greater than or equal to 0\\",
    \\"path\\": [
      \\"lastUpperSyncedBlockSlot\\"
    ]
  }
]"
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced block slot to an invalid slot 2`] = `
[ZodError: [
  {
    "code": "too_small",
    "minimum": 0,
    "type": "number",
    "inclusive": true,
    "exact": false,
    "message": "Number must be greater than or equal to 0",
    "path": [
      "lastUpperSyncedBlockSlot"
    ]
  }
]]
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced slot to an invalid slot 1`] = `
"[
  {
    \\"code\\": \\"too_small\\",
    \\"minimum\\": 0,
    \\"type\\": \\"number\\",
    \\"inclusive\\": true,
    \\"exact\\": false,
    \\"message\\": \\"Number must be greater than or equal to 0\\",
    \\"path\\": [
      \\"lastUpperSyncedSlot\\"
    ]
  }
]"
`;

exports[`updateState > when authorized > should fail when trying to update last upper synced slot to an invalid slot 2`] = `
[ZodError: [
  {
    "code": "too_small",
    "minimum": 0,
    "type": "number",
    "inclusive": true,
    "exact": false,
    "message": "Number must be greater than or equal to 0",
    "path": [
      "lastUpperSyncedSlot"
    ]
  }
]]
`;
