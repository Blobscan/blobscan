// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BlobStorage {
  GOOGLE   @map("google")
  POSTGRES @map("postgres")
  SWARM    @map("swarm")
}

model BlockchainSyncState {
  id                 Int @id @default(autoincrement())
  lastFinalizedBlock Int
  lastSlot           Int
}

model Address {
  address                    String   @id
  firstBlockNumberAsSender   Int?
  firstBlockNumberAsReceiver Int?
  insertedAt                 DateTime @default(now())
  updatedAt                  DateTime @default(now())

  firstBlockAsSender     Block?        @relation("firstBlockAsSenderRelation", fields: [firstBlockNumberAsSender], references: [number])
  firstBlockAsReceiver   Block?        @relation("firstBlockAsReceiverRelation", fields: [firstBlockNumberAsReceiver], references: [number])
  transactionsAsSender   Transaction[] @relation("senderAddressRelation")
  transactionsAsReceiver Transaction[] @relation("receiverAddressRelation")

  @@index([insertedAt])
}

model Blob {
  versionedHash    String   @id
  commitment       String   @unique
  size             Int
  firstBlockNumber Int?
  insertedAt       DateTime @default(now())
  updatedAt        DateTime @default(now())

  dataStorageReferences BlobDataStorageReference[]
  firstBlock            Block?                     @relation(fields: [firstBlockNumber], references: [number])
  transactions          BlobsOnTransactions[]

  @@index([insertedAt])
}

model BlobData {
  id   String @id
  data Bytes
}

model BlobDataStorageReference {
  blobHash      String
  blobStorage   BlobStorage
  dataReference String

  blob Blob @relation(fields: [blobHash], references: [versionedHash])

  @@id([blobHash, blobStorage])
}

model Block {
  hash       String   @id
  number     Int      @unique
  timestamp  DateTime @unique
  slot       Int      @unique
  insertedAt DateTime @default(now())
  updatedAt  DateTime @default(now())

  transactions         Transaction[]
  newSenderAddresses   Address[]     @relation("firstBlockAsSenderRelation")
  newReceiverAddresses Address[]     @relation("firstBlockAsReceiverRelation")
  newBlobs             Blob[]

  @@index([insertedAt])
}

model Transaction {
  hash        String   @id
  fromId      String
  toId        String?
  blockNumber Int
  insertedAt  DateTime @default(now())
  updatedAt   DateTime @default(now())

  blobs BlobsOnTransactions[]
  block Block                 @relation(fields: [blockNumber], references: [number])
  from  Address               @relation("senderAddressRelation", fields: [fromId], references: [address])
  to    Address?              @relation("receiverAddressRelation", fields: [toId], references: [address])

  @@index([insertedAt])
  @@index([blockNumber])
}

model BlobsOnTransactions {
  blobHash String
  txHash   String
  index    Int

  blob        Blob        @relation(fields: [blobHash], references: [versionedHash])
  transaction Transaction @relation(fields: [txHash], references: [hash])

  @@id([txHash, index])
  @@index([blobHash])
  @@index([txHash])
}

// Block Metrics
model BlockOverallStats {
  id          Int      @id @default(autoincrement())
  totalBlocks Int
  updatedAt   DateTime
}

model BlockDailyStats {
  day         DateTime @id @db.Date
  totalBlocks Int

  @@unique([day])
  @@index([day])
}

// Transaction metrics

model TransactionOverallStats {
  id                   Int      @id @default(autoincrement())
  totalTransactions    Int
  totalUniqueReceivers Int
  totalUniqueSenders   Int
  updatedAt            DateTime
}

model TransactionDailyStats {
  day                  DateTime @id @db.Date
  totalTransactions    Int
  totalUniqueSenders   Int
  totalUniqueReceivers Int
}

// Blob metrics
model BlobOverallStats {
  id               Int      @id @default(autoincrement())
  totalBlobs       Int
  totalUniqueBlobs Int
  totalBlobSize    BigInt
  avgBlobSize      Float
  updatedAt        DateTime
}

model BlobDailyStats {
  day              DateTime @id @db.Date
  totalBlobs       Int
  totalUniqueBlobs Int
  totalBlobSize    BigInt
  avgBlobSize      Float
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
