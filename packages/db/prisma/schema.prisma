// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IndexerMetadata {
  id       Int @id
  lastSlot Int @unique
}

model Address {
  address                String        @id
  isSender               Boolean
  isReceiver             Boolean
  transactionsAsSender   Transaction[] @relation("fromRelation")
  transactionsAsReceiver Transaction[] @relation("toRelation")
}

model Blob {
  id            String                @id
  versionedHash String                @unique
  commitment    String                @unique
  gsUri         String                @unique
  swarmHash     String?               @unique
  size          Int
  transactions  BlobsOnTransactions[]
}

model Block {
  id           Int           @id
  hash         String        @unique
  number       Int           @unique
  timestamp    DateTime      @unique
  slot         Int           @unique
  transactions Transaction[]
}

model Transaction {
  id          String                @id
  hash        String                @unique
  fromId      String
  toId        String?
  blockNumber Int
  timestamp   DateTime
  blobs       BlobsOnTransactions[]
  block       Block                 @relation(fields: [blockNumber], references: [number])
  from        Address               @relation("fromRelation", fields: [fromId], references: [address])
  to          Address?              @relation("toRelation", fields: [toId], references: [address])
}

model BlobsOnTransactions {
  blob        Blob        @relation(fields: [blobHash], references: [versionedHash])
  blobHash    String
  transaction Transaction @relation(fields: [txHash], references: [hash])
  txHash      String
  index       Int

  @@id([txHash, index])
}

// Block Metrics
model BlockOverallStats {
  id          Int      @id @default(autoincrement())
  totalBlocks Int
  updatedAt   DateTime
}

model BlockDailyStats {
  id          Int      @id @default(autoincrement())
  day         DateTime @db.Date
  totalBlocks Int

  @@unique([day])
  @@index([day])
}

// Transaction metrics

model TransactionOverallStats {
  id                   Int      @id @default(autoincrement())
  totalTransactions    Int
  totalUniqueReceivers Int
  totalUniqueSenders   Int
  updatedAt            DateTime
}

model TransactionDailyStats {
  id                   Int      @id @default(autoincrement())
  day                  DateTime @db.Date
  totalTransactions    Int
  totalUniqueSenders   Int
  totalUniqueReceivers Int

  @@unique([day])
  @@index([day])
}

// Blob metrics
model BlobOverallStats {
  id               Int      @id @default(autoincrement())
  totalBlobs       Int
  totalUniqueBlobs Int
  totalBlobSize    BigInt
  avgBlobSize      Float
  updatedAt        DateTime
}

model BlobDailyStats {
  id               Int      @id @default(autoincrement())
  day              DateTime @db.Date
  totalBlobs       Int
  totalUniqueBlobs Int
  totalBlobSize    BigInt
  avgBlobSize      Float

  @@unique([day])
  @@index([day])
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
