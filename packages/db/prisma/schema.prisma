// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // rhel-openssl-1.0.x is required by Vercel
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["tracing", "metrics", "typedSql"]
}

generator enum {
  provider = "ts-node --transpile-only ./prisma/enum-generator"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  imports               = "./zod-utils"
  prismaJsonNullability = false
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum BlobStorage {
  FILE_SYSTEM @map("file_system")
  GOOGLE      @map("google")
  POSTGRES    @map("postgres")
  SWARM       @map("swarm")
  WEAVEVM     @map("weavevm")

  @@map("blob_storage")
}

enum Category {
  OTHER  @map("other")
  ROLLUP @map("rollup")

  @@map("category")
}

enum Rollup {
  ABSTRACT          @map("abstract")
  AEVO              @map("aevo")
  ANCIENT8          @map("ancient8")
  ARBITRUM          @map("arbitrum")
  ARENAZ            @map("arenaz")
  BASE              @map("base")
  BLAST             @map("blast")
  BOB               @map("bob")
  BOBA              @map("boba")
  CAMP              @map("camp")
  DEBANKCHAIN       @map("debankchain")
  ETHERNITY         @map("ethernity")
  FRAXTAL           @map("fraxtal")
  FUEL              @map("fuel")
  HASHKEY           @map("hashkey")
  HEMI              @map("hemi")
  HYPR              @map("hypr")
  INFINAEON         @map("infinaeon")
  INK               @map("ink")
  KARAK             @map("karak")
  KINTO             @map("kinto")
  KROMA             @map("kroma")
  LAMBDA            @map("lambda")
  LINEA             @map("linea")
  LISK              @map("lisk")
  MANTA             @map("manta")
  MANTLE            @map("mantle")
  METAL             @map("metal")
  METAMAIL          @map("metamail")
  METIS             @map("metis")
  MINT              @map("mint")
  MODE              @map("mode")
  MORPH             @map("morph")
  NAL               @map("nal")
  NANONNETWORK      @map("nanonnetwork")
  OPBNB             @map("opbnb")
  OPTIMISM          @map("optimism")
  OPTOPIA           @map("optopia")
  ORDERLY           @map("orderly")
  PANDASEA          @map("pandasea")
  PARADEX           @map("paradex")
  PARALLEL          @map("parallel")
  PHALA             @map("phala")
  PGN               @map("pgn")
  POLYNOMIAL        @map("polynomial")
  R0AR              @map("r0ar")
  RACE              @map("race")
  RARI              @map("rari")
  RIVER             @map("river")
  SCROLL            @map("scroll")
  SHAPE             @map("shape")
  SNAXCHAIN         @map("snaxchain")
  SONEIUM           @map("soneium")
  STARKNET          @map("starknet")
  SUPERLUMIO        @map("superlumio")
  SUPERSEED         @map("superseed")
  SWANCHAIN         @map("swanchain")
  SWELLCHAIN        @map("swellchain")
  TAIKO             @map("taiko")
  THEBINARYHOLDINGS @map("thebinaryholdings")
  UNICHAIN          @map("unichain")
  WORLD             @map("world")
  XGA               @map("xga")
  ZERONETWORK       @map("zeronetwork")
  ZIRCUIT           @map("zircuit")
  ZORA              @map("zora")
  ZKSYNC            @map("zksync")

  @@map("rollup")
}

model BlockchainSyncState {
  id                       Int     @id @default(autoincrement())
  lastAggregatedBlock      Int?    @map("last_aggregated_block")
  lastFinalizedBlock       Int?    @map("last_finalized_block")
  lastLowerSyncedSlot      Int?    @map("last_lower_synced_slot")
  lastUpperSyncedSlot      Int?    @map("last_upper_synced_slot")
  lastUpperSyncedBlockRoot String? @map("last_upper_synced_block_root")
  lastUpperSyncedBlockSlot Int?    @map("last_upper_synced_block_slot")

  @@map("blockchain_sync_state")
}

//TODO: Rename to SwarmBatchStorage
model BlobStoragesState {
  id           Int      @id @default(autoincrement())
  swarmDataId  String?  @map("swarm_data_id") // TODO: rename to batchId
  swarmDataTTL Int?     @map("swarm_data_ttl") // TODO: rename to batchTtl
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("blob_storages_state")
}

model Address {
  address                    String   @id
  rollup                     Rollup?
  firstBlockNumberAsReceiver Int?     @map("first_block_number_as_receiver")
  firstBlockNumberAsSender   Int?     @map("first_block_number_as_sender")
  insertedAt                 DateTime @default(now()) @map("inserted_at")
  updatedAt                  DateTime @default(now()) @map("updated_at")

  transactionsAsSender   Transaction[] @relation("senderAddressRelation")
  transactionsAsReceiver Transaction[] @relation("receiverAddressRelation")

  @@index([address, rollup])
  @@index([rollup])
  @@index([firstBlockNumberAsReceiver])
  @@index([firstBlockNumberAsSender])
  @@index([insertedAt])
  @@map("address")
}

model Blob {
  versionedHash    String   @id @map("versioned_hash")
  commitment       String   @unique
  proof            String
  size             Int
  firstBlockNumber Int?     @map("first_block_number")
  insertedAt       DateTime @default(now()) @map("inserted_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  dataStorageReferences BlobDataStorageReference[]
  transactions          BlobsOnTransactions[]

  @@index([firstBlockNumber])
  @@index([proof])
  @@index([insertedAt])
  @@map("blob")
}

model BlobData {
  id   String @id
  data Bytes

  @@map("blob_data")
}

model BlobDataStorageReference {
  blobHash      String      @map("blob_hash")
  blobStorage   BlobStorage @map("storage")
  dataReference String      @map("data_reference")

  blob Blob @relation(fields: [blobHash], references: [versionedHash])

  @@id([blobHash, blobStorage])
  @@map("blob_data_storage_reference")
}

model Block {
  hash                  String   @id
  number                Int
  timestamp             DateTime @unique
  slot                  Int      @unique
  /// @zod.custom(imports.zodDecimalSchema)
  blobGasUsed           Decimal  @map("blob_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  excessBlobGas         Decimal  @map("excess_blob_gas") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  blobGasPrice          Decimal  @map("blob_gas_price") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  blobAsCalldataGasUsed Decimal  @map("blob_as_calldata_gas_used") @db.Decimal(100, 0)
  insertedAt            DateTime @default(now()) @map("inserted_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  blobsOnTransactions BlobsOnTransactions[]
  transactions        Transaction[]
  transactionForks    TransactionFork[]

  @@index([number])
  @@index([insertedAt])
  @@map("block")
}

model Transaction {
  hash                  String   @id
  fromId                String   @map("from_id")
  toId                  String   @map("to_id")
  blockHash             String   @map("block_hash")
  blockNumber           Int      @map("block_number")
  blockTimestamp        DateTime @map("block_timestamp")
  index                 Int?
  /// @zod.custom(imports.zodDecimalSchema)
  blobGasUsed           Decimal  @map("blob_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  maxFeePerBlobGas      Decimal  @map("max_fee_per_blob_gas") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  gasPrice              Decimal  @map("gas_price") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  blobAsCalldataGasUsed Decimal  @map("blob_as_calldata_gas_used") @db.Decimal(100, 0)
  insertedAt            DateTime @default(now()) @map("inserted_at")
  updatedAt             DateTime @default(now()) @map("updated_at")
  /// @zod.custom(imports.decodedFieldsSchema)
  decodedFields         Json     @default("{}") @map("decoded_fields")

  blobs BlobsOnTransactions[]
  block Block                 @relation(fields: [blockHash], references: [hash])
  from  Address               @relation("senderAddressRelation", fields: [fromId], references: [address])
  to    Address               @relation("receiverAddressRelation", fields: [toId], references: [address])

  transactionForks TransactionFork[]

  @@index([blockHash])
  @@index([blockTimestamp, index])
  @@index([blockNumber, index])
  @@index([fromId, blockTimestamp, index])
  @@index([toId, blockTimestamp, index])
  @@index([insertedAt])
  @@map("transaction")
}

model BlobsOnTransactions {
  blobHash       String   @map("blob_hash")
  blockHash      String   @map("block_hash")
  blockNumber    Int      @map("block_number")
  blockTimestamp DateTime @map("block_timestamp")
  txHash         String   @map("tx_hash")
  txIndex        Int      @map("tx_index")
  index          Int

  blob        Blob        @relation(fields: [blobHash], references: [versionedHash])
  block       Block       @relation(fields: [blockHash], references: [hash])
  transaction Transaction @relation(fields: [txHash], references: [hash])

  @@id([txHash, index])
  @@index([blockTimestamp, txIndex, index])
  @@index([blockNumber, txIndex, index])
  @@index([blobHash])
  @@index([blockHash])
  @@index([txHash])
  @@map("blobs_on_transactions")
}

model TransactionFork {
  hash       String
  blockHash  String   @map("block_hash")
  insertedAt DateTime @default(now()) @map("inserted_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  block       Block       @relation(fields: [blockHash], references: [hash])
  transaction Transaction @relation(fields: [hash], references: [hash])

  @@id([blockHash, hash])
  @@map("transaction_fork")
}

model DailyStats {
  id                         Int       @id @default(autoincrement())
  day                        DateTime  @db.Date
  category                   Category?
  rollup                     Rollup?
  avgBlobAsCalldataFee       Float     @default(0) @map("avg_blob_as_calldata_fee")
  avgBlobAsCalldataMaxFee    Float     @default(0) @map("avg_blob_as_calldata_max_fee")
  avgBlobFee                 Float     @default(0) @map("avg_blob_fee")
  avgBlobGasPrice            Float     @default(0) @map("avg_blob_gas_price")
  avgBlobMaxFee              Float     @default(0) @map("avg_blob_max_fee")
  avgMaxBlobGasFee           Float     @default(0) @map("avg_max_blob_gas_fee")
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataFee     Decimal   @default(0) @map("total_blob_as_calldata_fee") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataGasUsed Decimal   @default(0) @map("total_blob_as_calldata_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataMaxFees Decimal   @default(0) @map("total_blob_as_calldata_max_fees") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobGasPrice          Decimal   @default(0) @map("total_blob_gas_price") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobFee               Decimal   @default(0) @map("total_blob_fee") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobGasUsed           Decimal   @default(0) @map("total_blob_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobMaxFees           Decimal   @default(0) @map("total_blob_max_fees") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobMaxGasFees        Decimal   @default(0) @map("total_blob_max_gas_fees") @db.Decimal(100, 0)
  totalBlobs                 Int       @default(0) @map("total_blobs")
  totalBlobSize              BigInt    @default(0) @map("total_blob_size")
  totalBlocks                Int       @default(0) @map("total_blocks")
  totalTransactions          Int       @default(0) @map("total_transactions")
  totalUniqueBlobs           Int       @default(0) @map("total_unique_blobs")
  totalUniqueReceivers       Int       @default(0) @map("total_unique_receivers")
  totalUniqueSenders         Int       @default(0) @map("total_unique_senders")

  @@unique([day, category, rollup])
  @@map("daily_stats")
}

model OverallStats {
  id                         Int       @id @default(autoincrement())
  category                   Category?
  rollup                     Rollup?
  avgBlobAsCalldataFee       Float     @default(0) @map("avg_blob_as_calldata_fee")
  avgBlobAsCalldataMaxFee    Float     @default(0) @map("avg_blob_as_calldata_max_fee")
  avgBlobFee                 Float     @default(0) @map("avg_blob_fee")
  avgBlobGasPrice            Float     @default(0) @map("avg_blob_gas_price")
  avgBlobMaxFee              Float     @default(0) @map("avg_blob_max_fee")
  avgMaxBlobGasFee           Float     @default(0) @map("avg_max_blob_gas_fee")
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataFee     Decimal   @default(0) @map("total_blob_as_calldata_fee") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataGasUsed Decimal   @default(0) @map("total_blob_as_calldata_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobAsCalldataMaxFees Decimal   @default(0) @map("total_blob_as_calldata_max_fees") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobGasPrice          Decimal   @default(0) @map("total_blob_gas_price") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobFee               Decimal   @default(0) @map("total_blob_fee") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobGasUsed           Decimal   @default(0) @map("total_blob_gas_used") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobMaxFees           Decimal   @default(0) @map("total_blob_max_fees") @db.Decimal(100, 0)
  /// @zod.custom(imports.zodDecimalSchema)
  totalBlobMaxGasFees        Decimal   @default(0) @map("total_blob_max_gas_fees") @db.Decimal(100, 0)
  totalBlobs                 Int       @default(0) @map("total_blobs")
  totalBlobSize              BigInt    @default(0) @map("total_blob_size")
  totalBlocks                Int       @default(0) @map("total_blocks")
  totalTransactions          Int       @default(0) @map("total_transactions")
  totalUniqueBlobs           Int       @default(0) @map("total_unique_blobs")
  totalUniqueReceivers       Int       @default(0) @map("total_unique_receivers")
  totalUniqueSenders         Int       @default(0) @map("total_unique_senders")
  updatedAt                  DateTime  @default(now()) @map("updated_at")

  @@unique([category, rollup])
  @@map("overall_stats")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
