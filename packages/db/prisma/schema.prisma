// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IndexerMetadata {
  id          Int         @id
  lastSlot    Int         @unique
}

model Blob {
  id          Int         @id @default(autoincrement())
  versionedHash String    
  commitment  String
  data        String      @db.Text
  txHash      String
  index       Int
  timestamp   DateTime
  size        Int
  transaction Transaction @relation(fields: [txHash], references: [hash])
  
  @@unique([txHash, index])
}

model Block {
  id          Int           @id
  hash        String        @unique 
  number      Int           @unique
  timestamp   DateTime      @unique
  slot        Int           @unique
  transactions Transaction[]
}

model Transaction {
  id        String          @id
  hash      String          @unique
  from      String
  to        String?
  blockNumber Int
  timestamp DateTime
  blobs      Blob[]
  block     Block  @relation(fields: [blockNumber], references: [number])
}

// Block Metrics
model BlockOverallStats {
  id              Int      @id @default(autoincrement())
  totalBlocks     Int
  updatedAt DateTime
}

model BlockDailyStats {
  id          Int         @id @default(autoincrement())
  day         DateTime    @db.Date
  totalBlocks     Int

  @@unique([day])
  @@index([day])  
}

// Transaction metrics

model TransactionOverallStats {
  id                Int      @id @default(autoincrement())
  totalTransactions Int
  totalUniqueReceivers   Int
  totalUniqueSenders     Int
  updatedAt DateTime
}

model TransactionDailyStats {
  id          Int         @id @default(autoincrement())
  day         DateTime    @db.Date
  totalTransactions Int
  totalUniqueSenders    Int
  totalUniqueReceivers  Int
  @@unique([day])
  @@index([day])
}

// Blob metrics
model BlobOverallStats {
  id                  Int      @id @default(autoincrement())
  totalBlobs          Int
  totalUniqueBlobs    Int
  totalBlobSize       BigInt
  avgBlobSize         Float
  updatedAt DateTime
}

model BlobDailyStats {
  id          Int         @id @default(autoincrement())
  day         DateTime    @db.Date
  totalBlobs Int
  totalUniqueBlobs Int
  totalBlobSize BigInt
  avgBlobSize Float

  @@unique([day])
  @@index([day])
}




// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?  @db.Text
//     access_token      String?  @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?  @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
